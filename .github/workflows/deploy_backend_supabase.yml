name: Deploy Supabase Functions

on:
  push:
    branches: ["dev"]
    tags: ["*"]
  workflow_dispatch:

defaults:
  run:
    working-directory: ./backend

jobs:
  deploy-functions:
    name: Deploy Supabase Functions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set environment for branch
        run: |
          echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> "$GITHUB_ENV"
          if [[ $GITHUB_REF_NAME == 'dev' ]]; then
              echo "PROJECT_ID=${{ secrets.SUPABASE_STAGING_PROJECT_ID }}" >> "$GITHUB_ENV"
          else
              echo "PROJECT_ID=${{ secrets.SUPABASE_PROJECT_ID }}" >> "$GITHUB_ENV"
          fi
      - uses: supabase/setup-cli@v1
        with:
          version: 1.167.4
      - run: supabase functions deploy --project-ref $PROJECT_ID
  deploy-db:
    name: Deploy Supabase Database Migrations
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set environment for branch
        run: |
          echo "SUPABASE_ACCESS_TOKEN=${{ secrets.SUPABASE_ACCESS_TOKEN }}" >> "$GITHUB_ENV"
          if [[ $GITHUB_REF_NAME == 'dev' ]]; then
              echo "PROJECT_ID=${{ secrets.SUPABASE_STAGING_PROJECT_ID }}" >> "$GITHUB_ENV"
              echo "SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}" >> "$GITHUB_ENV"
          else
              echo "PROJECT_ID=${{ secrets.SUPABASE_PROJECT_ID }}" >> "$GITHUB_ENV"
              echo "SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_DB_PASSWORD }}" >> "$GITHUB_ENV"
          fi
      - uses: supabase/setup-cli@v1
        with:
          version: 1.167.4
      - run: supabase link --project-ref $PROJECT_ID
      - run: supabase db push
      # Only reset staging database
      - if: ${{ github.ref_name == 'dev' }}
        run: supabase db reset --linked
