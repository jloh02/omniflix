create table "public"."user_following" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "following_id" uuid not null
);


alter table "public"."user_following" enable row level security;

CREATE UNIQUE INDEX user_following_id_key ON public.user_following USING btree (id);

CREATE UNIQUE INDEX user_following_pkey ON public.user_following USING btree (id);

alter table "public"."user_following" add constraint "user_following_pkey" PRIMARY KEY using index "user_following_pkey";

alter table "public"."user_following" add constraint "user_following_following_id_fkey" FOREIGN KEY (following_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_following" validate constraint "user_following_following_id_fkey";

alter table "public"."user_following" add constraint "user_following_following_id_fkey1" FOREIGN KEY (following_id) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_following" validate constraint "user_following_following_id_fkey1";

alter table "public"."user_following" add constraint "user_following_id_key" UNIQUE using index "user_following_id_key";

alter table "public"."user_following" add constraint "user_following_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_following" validate constraint "user_following_user_id_fkey";

alter table "public"."user_following" add constraint "user_following_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_following" validate constraint "user_following_user_id_fkey1";

grant delete on table "public"."user_following" to "anon";

grant insert on table "public"."user_following" to "anon";

grant references on table "public"."user_following" to "anon";

grant select on table "public"."user_following" to "anon";

grant trigger on table "public"."user_following" to "anon";

grant truncate on table "public"."user_following" to "anon";

grant update on table "public"."user_following" to "anon";

grant delete on table "public"."user_following" to "authenticated";

grant insert on table "public"."user_following" to "authenticated";

grant references on table "public"."user_following" to "authenticated";

grant select on table "public"."user_following" to "authenticated";

grant trigger on table "public"."user_following" to "authenticated";

grant truncate on table "public"."user_following" to "authenticated";

grant update on table "public"."user_following" to "authenticated";

grant delete on table "public"."user_following" to "service_role";

grant insert on table "public"."user_following" to "service_role";

grant references on table "public"."user_following" to "service_role";

grant select on table "public"."user_following" to "service_role";

grant trigger on table "public"."user_following" to "service_role";

grant truncate on table "public"."user_following" to "service_role";

grant update on table "public"."user_following" to "service_role";

create policy "Enable delete for authenticated users based on user_id"
on "public"."user_following"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users based on user_id"
on "public"."user_following"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable select for authenticated users only"
on "public"."user_following"
as permissive
for select
to authenticated
using (true);



