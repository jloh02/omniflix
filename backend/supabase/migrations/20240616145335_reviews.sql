create table "public"."reviews" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "media_type" media_type not null,
    "media_id" text not null,
    "rating" smallint not null,
    "title" text not null,
    "description" text not null
);


alter table "public"."reviews" enable row level security;

CREATE UNIQUE INDEX reviews_id_key ON public.reviews USING btree (id);

CREATE UNIQUE INDEX reviews_pkey ON public.reviews USING btree (id);

alter table "public"."reviews" add constraint "reviews_pkey" PRIMARY KEY using index "reviews_pkey";

alter table "public"."reviews" add constraint "reviews_id_key" UNIQUE using index "reviews_id_key";

alter table "public"."reviews" add constraint "reviews_media_id_fkey" FOREIGN KEY (media_id) REFERENCES movies(imdb_id) ON UPDATE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_media_id_fkey";

alter table "public"."reviews" add constraint "reviews_rating_check" CHECK (((rating >= 0) AND (rating <= 5))) not valid;

alter table "public"."reviews" validate constraint "reviews_rating_check";

alter table "public"."reviews" add constraint "reviews_title_check" CHECK ((length(title) > 0)) not valid;

alter table "public"."reviews" validate constraint "reviews_title_check";

alter table "public"."reviews" add constraint "reviews_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reviews" validate constraint "reviews_user_id_fkey";

alter table "public"."reviews" add constraint "reviews_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES users_info(user_id) not valid;

alter table "public"."reviews" validate constraint "reviews_user_id_fkey1";

grant delete on table "public"."reviews" to "anon";

grant insert on table "public"."reviews" to "anon";

grant references on table "public"."reviews" to "anon";

grant select on table "public"."reviews" to "anon";

grant trigger on table "public"."reviews" to "anon";

grant truncate on table "public"."reviews" to "anon";

grant update on table "public"."reviews" to "anon";

grant delete on table "public"."reviews" to "authenticated";

grant insert on table "public"."reviews" to "authenticated";

grant references on table "public"."reviews" to "authenticated";

grant select on table "public"."reviews" to "authenticated";

grant trigger on table "public"."reviews" to "authenticated";

grant truncate on table "public"."reviews" to "authenticated";

grant update on table "public"."reviews" to "authenticated";

grant delete on table "public"."reviews" to "service_role";

grant insert on table "public"."reviews" to "service_role";

grant references on table "public"."reviews" to "service_role";

grant select on table "public"."reviews" to "service_role";

grant trigger on table "public"."reviews" to "service_role";

grant truncate on table "public"."reviews" to "service_role";

grant update on table "public"."reviews" to "service_role";

create policy "Enable delete for authenticated users based on user_id"
on "public"."reviews"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users based on user_id"
on "public"."reviews"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for authenticated users only"
on "public"."reviews"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for authenticated users based on user_id"
on "public"."reviews"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));



