create table "public"."collection_entries" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "collection_id" bigint not null,
    "media_id" bigint not null
);


alter table "public"."collection_entries" enable row level security;

create table "public"."collection_users" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "collection_id" bigint not null,
    "user_id" uuid not null
);


alter table "public"."collection_users" enable row level security;

create table "public"."collections" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "owner_id" uuid not null default auth.uid(),
    "name" text not null
);


alter table "public"."collections" enable row level security;

CREATE UNIQUE INDEX collection_entries_id_key ON public.collection_entries USING btree (id);

CREATE UNIQUE INDEX collection_entries_pkey ON public.collection_entries USING btree (id);

CREATE UNIQUE INDEX collection_users_id_key ON public.collection_users USING btree (id);

CREATE UNIQUE INDEX collection_users_pkey ON public.collection_users USING btree (id);

CREATE UNIQUE INDEX collections_id_key ON public.collections USING btree (id);

CREATE UNIQUE INDEX collections_pkey ON public.collections USING btree (id);

alter table "public"."collection_entries" add constraint "collection_entries_pkey" PRIMARY KEY using index "collection_entries_pkey";

alter table "public"."collection_users" add constraint "collection_users_pkey" PRIMARY KEY using index "collection_users_pkey";

alter table "public"."collections" add constraint "collections_pkey" PRIMARY KEY using index "collections_pkey";

alter table "public"."collection_entries" add constraint "collection_entries_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collection_entries" validate constraint "collection_entries_collection_id_fkey";

alter table "public"."collection_entries" add constraint "collection_entries_id_key" UNIQUE using index "collection_entries_id_key";

alter table "public"."collection_entries" add constraint "collection_entries_media_id_fkey" FOREIGN KEY (media_id) REFERENCES media(media_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collection_entries" validate constraint "collection_entries_media_id_fkey";

alter table "public"."collection_users" add constraint "collection_users_collection_id_fkey" FOREIGN KEY (collection_id) REFERENCES collections(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collection_users" validate constraint "collection_users_collection_id_fkey";

alter table "public"."collection_users" add constraint "collection_users_id_key" UNIQUE using index "collection_users_id_key";

alter table "public"."collection_users" add constraint "collection_users_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collection_users" validate constraint "collection_users_user_id_fkey";

alter table "public"."collection_users" add constraint "collection_users_user_id_fkey1" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collection_users" validate constraint "collection_users_user_id_fkey1";

alter table "public"."collections" add constraint "collections_id_key" UNIQUE using index "collections_id_key";

alter table "public"."collections" add constraint "collections_owner_id_fkey" FOREIGN KEY (owner_id) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collections" validate constraint "collections_owner_id_fkey";

alter table "public"."collections" add constraint "collections_owner_id_fkey1" FOREIGN KEY (owner_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."collections" validate constraint "collections_owner_id_fkey1";

grant delete on table "public"."collection_entries" to "anon";

grant insert on table "public"."collection_entries" to "anon";

grant references on table "public"."collection_entries" to "anon";

grant select on table "public"."collection_entries" to "anon";

grant trigger on table "public"."collection_entries" to "anon";

grant truncate on table "public"."collection_entries" to "anon";

grant update on table "public"."collection_entries" to "anon";

grant delete on table "public"."collection_entries" to "authenticated";

grant insert on table "public"."collection_entries" to "authenticated";

grant references on table "public"."collection_entries" to "authenticated";

grant select on table "public"."collection_entries" to "authenticated";

grant trigger on table "public"."collection_entries" to "authenticated";

grant truncate on table "public"."collection_entries" to "authenticated";

grant update on table "public"."collection_entries" to "authenticated";

grant delete on table "public"."collection_entries" to "service_role";

grant insert on table "public"."collection_entries" to "service_role";

grant references on table "public"."collection_entries" to "service_role";

grant select on table "public"."collection_entries" to "service_role";

grant trigger on table "public"."collection_entries" to "service_role";

grant truncate on table "public"."collection_entries" to "service_role";

grant update on table "public"."collection_entries" to "service_role";

grant delete on table "public"."collection_users" to "anon";

grant insert on table "public"."collection_users" to "anon";

grant references on table "public"."collection_users" to "anon";

grant select on table "public"."collection_users" to "anon";

grant trigger on table "public"."collection_users" to "anon";

grant truncate on table "public"."collection_users" to "anon";

grant update on table "public"."collection_users" to "anon";

grant delete on table "public"."collection_users" to "authenticated";

grant insert on table "public"."collection_users" to "authenticated";

grant references on table "public"."collection_users" to "authenticated";

grant select on table "public"."collection_users" to "authenticated";

grant trigger on table "public"."collection_users" to "authenticated";

grant truncate on table "public"."collection_users" to "authenticated";

grant update on table "public"."collection_users" to "authenticated";

grant delete on table "public"."collection_users" to "service_role";

grant insert on table "public"."collection_users" to "service_role";

grant references on table "public"."collection_users" to "service_role";

grant select on table "public"."collection_users" to "service_role";

grant trigger on table "public"."collection_users" to "service_role";

grant truncate on table "public"."collection_users" to "service_role";

grant update on table "public"."collection_users" to "service_role";

grant delete on table "public"."collections" to "anon";

grant insert on table "public"."collections" to "anon";

grant references on table "public"."collections" to "anon";

grant select on table "public"."collections" to "anon";

grant trigger on table "public"."collections" to "anon";

grant truncate on table "public"."collections" to "anon";

grant update on table "public"."collections" to "anon";

grant delete on table "public"."collections" to "authenticated";

grant insert on table "public"."collections" to "authenticated";

grant references on table "public"."collections" to "authenticated";

grant select on table "public"."collections" to "authenticated";

grant trigger on table "public"."collections" to "authenticated";

grant truncate on table "public"."collections" to "authenticated";

grant update on table "public"."collections" to "authenticated";

grant delete on table "public"."collections" to "service_role";

grant insert on table "public"."collections" to "service_role";

grant references on table "public"."collections" to "service_role";

grant select on table "public"."collections" to "service_role";

grant trigger on table "public"."collections" to "service_role";

grant truncate on table "public"."collections" to "service_role";

grant update on table "public"."collections" to "service_role";

create policy "Collaborators can update their collection entries"
on "public"."collection_entries"
as permissive
for all
to authenticated
using ((collection_id IN ( SELECT collection_users.collection_id
   FROM collection_users
  WHERE (collection_users.user_id = auth.uid()))));


create policy "Enable select for authenticated users only"
on "public"."collection_entries"
as permissive
for select
to authenticated
using (true);


create policy "Enable select for authenticated users only"
on "public"."collection_users"
as permissive
for select
to authenticated
using (true);


create policy "Owners can update their collection collaborators"
on "public"."collection_users"
as permissive
for all
to authenticated
using ((collection_id IN ( SELECT collections.id
   FROM collections
  WHERE (collections.owner_id = auth.uid()))));


create policy "Enable delete for authenticated users based on user_id"
on "public"."collections"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable insert for authenticated users based on user_id"
on "public"."collections"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = owner_id));


create policy "Enable select for authenticated users only"
on "public"."collections"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for authenticated users based on user_id"
on "public"."collections"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = owner_id));



