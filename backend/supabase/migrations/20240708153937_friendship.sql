create table "public"."friend_requests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id1" uuid not null,
    "user_id2" uuid not null,
    "request_direction" boolean not null
);


alter table "public"."friend_requests" enable row level security;

create table "public"."friendships" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id1" uuid not null,
    "user_id2" uuid not null
);


alter table "public"."friendships" enable row level security;

CREATE UNIQUE INDEX friend_requests_id_key ON public.friend_requests USING btree (id);

CREATE UNIQUE INDEX friend_requests_pkey ON public.friend_requests USING btree (id);

CREATE UNIQUE INDEX friendships_id_key ON public.friendships USING btree (id);

CREATE UNIQUE INDEX friendships_pkey ON public.friendships USING btree (id);

alter table "public"."friend_requests" add constraint "friend_requests_pkey" PRIMARY KEY using index "friend_requests_pkey";

alter table "public"."friendships" add constraint "friendships_pkey" PRIMARY KEY using index "friendships_pkey";

alter table "public"."friend_requests" add constraint "friend_requests_id_key" UNIQUE using index "friend_requests_id_key";

alter table "public"."friend_requests" add constraint "friend_requests_user_id1_fkey" FOREIGN KEY (user_id1) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friend_requests" validate constraint "friend_requests_user_id1_fkey";

alter table "public"."friend_requests" add constraint "friend_requests_user_id1_fkey1" FOREIGN KEY (user_id1) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friend_requests" validate constraint "friend_requests_user_id1_fkey1";

alter table "public"."friend_requests" add constraint "friend_requests_user_id2_fkey" FOREIGN KEY (user_id2) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friend_requests" validate constraint "friend_requests_user_id2_fkey";

alter table "public"."friend_requests" add constraint "friend_requests_user_id2_fkey1" FOREIGN KEY (user_id2) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friend_requests" validate constraint "friend_requests_user_id2_fkey1";

alter table "public"."friendships" add constraint "friendships_id_key" UNIQUE using index "friendships_id_key";

alter table "public"."friendships" add constraint "friendships_user_id1_fkey" FOREIGN KEY (user_id1) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friendships" validate constraint "friendships_user_id1_fkey";

alter table "public"."friendships" add constraint "friendships_user_id1_fkey1" FOREIGN KEY (user_id1) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friendships" validate constraint "friendships_user_id1_fkey1";

alter table "public"."friendships" add constraint "friendships_user_id2_fkey" FOREIGN KEY (user_id2) REFERENCES users_info(user_id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friendships" validate constraint "friendships_user_id2_fkey";

alter table "public"."friendships" add constraint "friendships_user_id2_fkey1" FOREIGN KEY (user_id2) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."friendships" validate constraint "friendships_user_id2_fkey1";

grant delete on table "public"."friend_requests" to "anon";

grant insert on table "public"."friend_requests" to "anon";

grant references on table "public"."friend_requests" to "anon";

grant select on table "public"."friend_requests" to "anon";

grant trigger on table "public"."friend_requests" to "anon";

grant truncate on table "public"."friend_requests" to "anon";

grant update on table "public"."friend_requests" to "anon";

grant delete on table "public"."friend_requests" to "authenticated";

grant insert on table "public"."friend_requests" to "authenticated";

grant references on table "public"."friend_requests" to "authenticated";

grant select on table "public"."friend_requests" to "authenticated";

grant trigger on table "public"."friend_requests" to "authenticated";

grant truncate on table "public"."friend_requests" to "authenticated";

grant update on table "public"."friend_requests" to "authenticated";

grant delete on table "public"."friend_requests" to "service_role";

grant insert on table "public"."friend_requests" to "service_role";

grant references on table "public"."friend_requests" to "service_role";

grant select on table "public"."friend_requests" to "service_role";

grant trigger on table "public"."friend_requests" to "service_role";

grant truncate on table "public"."friend_requests" to "service_role";

grant update on table "public"."friend_requests" to "service_role";

grant delete on table "public"."friendships" to "anon";

grant insert on table "public"."friendships" to "anon";

grant references on table "public"."friendships" to "anon";

grant select on table "public"."friendships" to "anon";

grant trigger on table "public"."friendships" to "anon";

grant truncate on table "public"."friendships" to "anon";

grant update on table "public"."friendships" to "anon";

grant delete on table "public"."friendships" to "authenticated";

grant insert on table "public"."friendships" to "authenticated";

grant references on table "public"."friendships" to "authenticated";

grant select on table "public"."friendships" to "authenticated";

grant trigger on table "public"."friendships" to "authenticated";

grant truncate on table "public"."friendships" to "authenticated";

grant update on table "public"."friendships" to "authenticated";

grant delete on table "public"."friendships" to "service_role";

grant insert on table "public"."friendships" to "service_role";

grant references on table "public"."friendships" to "service_role";

grant select on table "public"."friendships" to "service_role";

grant trigger on table "public"."friendships" to "service_role";

grant truncate on table "public"."friendships" to "service_role";

grant update on table "public"."friendships" to "service_role";

create policy "Enable delete for authenticated users based on user_id"
on "public"."friend_requests"
as permissive
for delete
to authenticated
using (((( SELECT auth.uid() AS uid) = user_id1) OR (( SELECT auth.uid() AS uid) = user_id2)));


create policy "Enable insert for authenticated users based on user_id"
on "public"."friend_requests"
as permissive
for insert
to authenticated
with check (((( SELECT auth.uid() AS uid) = user_id1) OR (( SELECT auth.uid() AS uid) = user_id2)));


create policy "Enable select for authenticated users only"
on "public"."friend_requests"
as permissive
for select
to authenticated
using (true);


create policy "Enable delete for authenticated users based on user_id"
on "public"."friendships"
as permissive
for delete
to authenticated
using (((( SELECT auth.uid() AS uid) = user_id1) OR (( SELECT auth.uid() AS uid) = user_id2)));


create policy "Enable insert for authenticated users based on user_id"
on "public"."friendships"
as permissive
for insert
to authenticated
with check (((( SELECT auth.uid() AS uid) = user_id1) OR (( SELECT auth.uid() AS uid) = user_id2)));


create policy "Enable select for authenticated users only"
on "public"."friendships"
as permissive
for select
to authenticated
using (true);



