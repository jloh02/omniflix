create table "public"."likes_dislikes" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "media_type" media_type not null,
    "media_id" text not null,
    "status" smallint not null
);


alter table "public"."likes_dislikes" enable row level security;

CREATE UNIQUE INDEX likes_dislikes_id_key ON public.likes_dislikes USING btree (id);

CREATE UNIQUE INDEX likes_dislikes_pkey ON public.likes_dislikes USING btree (id);

alter table "public"."likes_dislikes" add constraint "likes_dislikes_pkey" PRIMARY KEY using index "likes_dislikes_pkey";

alter table "public"."likes_dislikes" add constraint "likes_dislikes_id_key" UNIQUE using index "likes_dislikes_id_key";

alter table "public"."likes_dislikes" add constraint "likes_dislikes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."likes_dislikes" validate constraint "likes_dislikes_user_id_fkey";

grant delete on table "public"."likes_dislikes" to "anon";

grant insert on table "public"."likes_dislikes" to "anon";

grant references on table "public"."likes_dislikes" to "anon";

grant select on table "public"."likes_dislikes" to "anon";

grant trigger on table "public"."likes_dislikes" to "anon";

grant truncate on table "public"."likes_dislikes" to "anon";

grant update on table "public"."likes_dislikes" to "anon";

grant delete on table "public"."likes_dislikes" to "authenticated";

grant insert on table "public"."likes_dislikes" to "authenticated";

grant references on table "public"."likes_dislikes" to "authenticated";

grant select on table "public"."likes_dislikes" to "authenticated";

grant trigger on table "public"."likes_dislikes" to "authenticated";

grant truncate on table "public"."likes_dislikes" to "authenticated";

grant update on table "public"."likes_dislikes" to "authenticated";

grant delete on table "public"."likes_dislikes" to "service_role";

grant insert on table "public"."likes_dislikes" to "service_role";

grant references on table "public"."likes_dislikes" to "service_role";

grant select on table "public"."likes_dislikes" to "service_role";

grant trigger on table "public"."likes_dislikes" to "service_role";

grant truncate on table "public"."likes_dislikes" to "service_role";

grant update on table "public"."likes_dislikes" to "service_role";

create policy "Enable all for authenticated users only based on user_id"
on "public"."likes_dislikes"
as permissive
for all
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable read access for all users"
on "public"."likes_dislikes"
as permissive
for select
to public
using (true);



